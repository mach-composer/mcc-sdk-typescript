/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommitData } from './CommitData';
import {
    CommitDataFromJSON,
    CommitDataFromJSONTyped,
    CommitDataToJSON,
} from './CommitData';

/**
 * 
 * @export
 * @interface CommitDataPaginator
 */
export interface CommitDataPaginator {
    /**
     * Number of items in the current page
     * @type {number}
     * @memberof CommitDataPaginator
     */
    count: number;
    /**
     * Total number of items found
     * @type {number}
     * @memberof CommitDataPaginator
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof CommitDataPaginator
     */
    offset: number;
    /**
     * 
     * @type {number}
     * @memberof CommitDataPaginator
     */
    limit: number;
    /**
     * 
     * @type {Array<CommitData>}
     * @memberof CommitDataPaginator
     */
    results: Array<CommitData>;
}

/**
 * Check if a given object implements the CommitDataPaginator interface.
 */
export function instanceOfCommitDataPaginator(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "count" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "offset" in value;
    isInstance = isInstance && "limit" in value;
    isInstance = isInstance && "results" in value;

    return isInstance;
}

export function CommitDataPaginatorFromJSON(json: any): CommitDataPaginator {
    return CommitDataPaginatorFromJSONTyped(json, false);
}

export function CommitDataPaginatorFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommitDataPaginator {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': json['count'],
        'total': json['total'],
        'offset': json['offset'],
        'limit': json['limit'],
        'results': ((json['results'] as Array<any>).map(CommitDataFromJSON)),
    };
}

export function CommitDataPaginatorToJSON(value?: CommitDataPaginator | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'total': value.total,
        'offset': value.offset,
        'limit': value.limit,
        'results': ((value.results as Array<any>).map(CommitDataToJSON)),
    };
}

