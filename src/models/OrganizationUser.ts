/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrganizationUserProjectsInner } from './OrganizationUserProjectsInner';
import {
    OrganizationUserProjectsInnerFromJSON,
    OrganizationUserProjectsInnerFromJSONTyped,
    OrganizationUserProjectsInnerToJSON,
} from './OrganizationUserProjectsInner';

/**
 * 
 * @export
 * @interface OrganizationUser
 */
export interface OrganizationUser {
    /**
     * 
     * @type {string}
     * @memberof OrganizationUser
     */
    clientId?: string;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationUser
     */
    createdAt?: Date;
    /**
     * Name of the user
     * @type {string}
     * @memberof OrganizationUser
     */
    name?: string;
    /**
     * E-mail address of the user
     * @type {string}
     * @memberof OrganizationUser
     */
    email: string;
    /**
     * The avatar profile image url of the user
     * @type {string}
     * @memberof OrganizationUser
     */
    avatarUrl?: string;
    /**
     * Key of the organization
     * @type {string}
     * @memberof OrganizationUser
     */
    organizationKey?: string;
    /**
     * Name of the organization
     * @type {string}
     * @memberof OrganizationUser
     */
    organizationName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrganizationUser
     */
    organizationScopes?: Array<string>;
    /**
     * 
     * @type {Array<OrganizationUserProjectsInner>}
     * @memberof OrganizationUser
     */
    projects?: Array<OrganizationUserProjectsInner>;
}

/**
 * Check if a given object implements the OrganizationUser interface.
 */
export function instanceOfOrganizationUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "email" in value;

    return isInstance;
}

export function OrganizationUserFromJSON(json: any): OrganizationUser {
    return OrganizationUserFromJSONTyped(json, false);
}

export function OrganizationUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'clientId': !exists(json, 'client_id') ? undefined : json['client_id'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': json['email'],
        'avatarUrl': !exists(json, 'avatar_url') ? undefined : json['avatar_url'],
        'organizationKey': !exists(json, 'organization_key') ? undefined : json['organization_key'],
        'organizationName': !exists(json, 'organization_name') ? undefined : json['organization_name'],
        'organizationScopes': !exists(json, 'organization_scopes') ? undefined : json['organization_scopes'],
        'projects': !exists(json, 'projects') ? undefined : ((json['projects'] as Array<any>).map(OrganizationUserProjectsInnerFromJSON)),
    };
}

export function OrganizationUserToJSON(value?: OrganizationUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'client_id': value.clientId,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'name': value.name,
        'email': value.email,
        'avatar_url': value.avatarUrl,
        'organization_key': value.organizationKey,
        'organization_name': value.organizationName,
        'organization_scopes': value.organizationScopes,
        'projects': value.projects === undefined ? undefined : ((value.projects as Array<any>).map(OrganizationUserProjectsInnerToJSON)),
    };
}

