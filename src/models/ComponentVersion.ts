/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ComponentVersion
 */
export interface ComponentVersion {
    /**
     * 
     * @type {Date}
     * @memberof ComponentVersion
     */
    createdAt: Date;
    /**
     * key of the component
     * @type {string}
     * @memberof ComponentVersion
     */
    component: string;
    /**
     * version of the component
     * @type {string}
     * @memberof ComponentVersion
     */
    version: string;
    /**
     * branch of the version
     * @type {string}
     * @memberof ComponentVersion
     */
    branch?: string;
}

/**
 * Check if a given object implements the ComponentVersion interface.
 */
export function instanceOfComponentVersion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function ComponentVersionFromJSON(json: any): ComponentVersion {
    return ComponentVersionFromJSONTyped(json, false);
}

export function ComponentVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComponentVersion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'component': json['component'],
        'version': json['version'],
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
    };
}

export function ComponentVersionToJSON(value?: ComponentVersion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': (value.createdAt.toISOString()),
        'component': value.component,
        'version': value.version,
        'branch': value.branch,
    };
}

