/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Project } from './Project';
import {
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
} from './Project';

/**
 * 
 * @export
 * @interface ProjectPaginator
 */
export interface ProjectPaginator {
    /**
     * Number of items in the current page
     * @type {number}
     * @memberof ProjectPaginator
     */
    count: number;
    /**
     * Total number of items found
     * @type {number}
     * @memberof ProjectPaginator
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectPaginator
     */
    offset: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectPaginator
     */
    limit: number;
    /**
     * 
     * @type {Array<Project>}
     * @memberof ProjectPaginator
     */
    results: Array<Project>;
}

/**
 * Check if a given object implements the ProjectPaginator interface.
 */
export function instanceOfProjectPaginator(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "count" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "offset" in value;
    isInstance = isInstance && "limit" in value;
    isInstance = isInstance && "results" in value;

    return isInstance;
}

export function ProjectPaginatorFromJSON(json: any): ProjectPaginator {
    return ProjectPaginatorFromJSONTyped(json, false);
}

export function ProjectPaginatorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectPaginator {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': json['count'],
        'total': json['total'],
        'offset': json['offset'],
        'limit': json['limit'],
        'results': ((json['results'] as Array<any>).map(ProjectFromJSON)),
    };
}

export function ProjectPaginatorToJSON(value?: ProjectPaginator | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'total': value.total,
        'offset': value.offset,
        'limit': value.limit,
        'results': ((value.results as Array<any>).map(ProjectToJSON)),
    };
}

