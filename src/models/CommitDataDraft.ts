/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommitDataAuthor } from './CommitDataAuthor';
import {
    CommitDataAuthorFromJSON,
    CommitDataAuthorFromJSONTyped,
    CommitDataAuthorToJSON,
} from './CommitDataAuthor';

/**
 * 
 * @export
 * @interface CommitDataDraft
 */
export interface CommitDataDraft {
    /**
     * 
     * @type {string}
     * @memberof CommitDataDraft
     */
    commit: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CommitDataDraft
     */
    parents?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CommitDataDraft
     */
    subject: string;
    /**
     * 
     * @type {CommitDataAuthor}
     * @memberof CommitDataDraft
     */
    author: CommitDataAuthor;
    /**
     * 
     * @type {CommitDataAuthor}
     * @memberof CommitDataDraft
     */
    committer: CommitDataAuthor;
}

/**
 * Check if a given object implements the CommitDataDraft interface.
 */
export function instanceOfCommitDataDraft(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "commit" in value;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "author" in value;
    isInstance = isInstance && "committer" in value;

    return isInstance;
}

export function CommitDataDraftFromJSON(json: any): CommitDataDraft {
    return CommitDataDraftFromJSONTyped(json, false);
}

export function CommitDataDraftFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommitDataDraft {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'commit': json['commit'],
        'parents': !exists(json, 'parents') ? undefined : json['parents'],
        'subject': json['subject'],
        'author': CommitDataAuthorFromJSON(json['author']),
        'committer': CommitDataAuthorFromJSON(json['committer']),
    };
}

export function CommitDataDraftToJSON(value?: CommitDataDraft | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'commit': value.commit,
        'parents': value.parents,
        'subject': value.subject,
        'author': CommitDataAuthorToJSON(value.author),
        'committer': CommitDataAuthorToJSON(value.committer),
    };
}

