/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommitData } from './CommitData';
import {
    CommitDataFromJSON,
    CommitDataFromJSONTyped,
    CommitDataToJSON,
} from './CommitData';

/**
 * 
 * @export
 * @interface ComponentVersionCommits
 */
export interface ComponentVersionCommits {
    /**
     * 
     * @type {Array<CommitData>}
     * @memberof ComponentVersionCommits
     */
    commits: Array<CommitData>;
}

/**
 * Check if a given object implements the ComponentVersionCommits interface.
 */
export function instanceOfComponentVersionCommits(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "commits" in value;

    return isInstance;
}

export function ComponentVersionCommitsFromJSON(json: any): ComponentVersionCommits {
    return ComponentVersionCommitsFromJSONTyped(json, false);
}

export function ComponentVersionCommitsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComponentVersionCommits {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'commits': ((json['commits'] as Array<any>).map(CommitDataFromJSON)),
    };
}

export function ComponentVersionCommitsToJSON(value?: ComponentVersionCommits | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'commits': ((value.commits as Array<any>).map(CommitDataToJSON)),
    };
}

