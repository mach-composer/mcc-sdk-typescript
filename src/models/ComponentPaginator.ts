/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Component } from './Component';
import {
    ComponentFromJSON,
    ComponentFromJSONTyped,
    ComponentToJSON,
} from './Component';

/**
 * 
 * @export
 * @interface ComponentPaginator
 */
export interface ComponentPaginator {
    /**
     * Number of items in the current page
     * @type {number}
     * @memberof ComponentPaginator
     */
    count: number;
    /**
     * Total number of items found
     * @type {number}
     * @memberof ComponentPaginator
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof ComponentPaginator
     */
    offset: number;
    /**
     * 
     * @type {number}
     * @memberof ComponentPaginator
     */
    limit: number;
    /**
     * 
     * @type {Array<Component>}
     * @memberof ComponentPaginator
     */
    results: Array<Component>;
}

/**
 * Check if a given object implements the ComponentPaginator interface.
 */
export function instanceOfComponentPaginator(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "count" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "offset" in value;
    isInstance = isInstance && "limit" in value;
    isInstance = isInstance && "results" in value;

    return isInstance;
}

export function ComponentPaginatorFromJSON(json: any): ComponentPaginator {
    return ComponentPaginatorFromJSONTyped(json, false);
}

export function ComponentPaginatorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComponentPaginator {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': json['count'],
        'total': json['total'],
        'offset': json['offset'],
        'limit': json['limit'],
        'results': ((json['results'] as Array<any>).map(ComponentFromJSON)),
    };
}

export function ComponentPaginatorToJSON(value?: ComponentPaginator | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'total': value.total,
        'offset': value.offset,
        'limit': value.limit,
        'results': ((value.results as Array<any>).map(ComponentToJSON)),
    };
}

