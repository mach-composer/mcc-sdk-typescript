/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface JSONPatchRequestAddReplaceTest
 */
export interface JSONPatchRequestAddReplaceTest {
    /**
     * A JSON Pointer path.
     * @type {string}
     * @memberof JSONPatchRequestAddReplaceTest
     */
    path: string;
    /**
     * The value to add, replace or test.
     * @type {any}
     * @memberof JSONPatchRequestAddReplaceTest
     */
    value: any | null;
    /**
     * The operation to perform.
     * @type {string}
     * @memberof JSONPatchRequestAddReplaceTest
     */
    op: JSONPatchRequestAddReplaceTestOpEnum;
}


/**
 * @export
 */
export const JSONPatchRequestAddReplaceTestOpEnum = {
    Add: 'add',
    Replace: 'replace',
    Test: 'test'
} as const;
export type JSONPatchRequestAddReplaceTestOpEnum = typeof JSONPatchRequestAddReplaceTestOpEnum[keyof typeof JSONPatchRequestAddReplaceTestOpEnum];


/**
 * Check if a given object implements the JSONPatchRequestAddReplaceTest interface.
 */
export function instanceOfJSONPatchRequestAddReplaceTest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "op" in value;

    return isInstance;
}

export function JSONPatchRequestAddReplaceTestFromJSON(json: any): JSONPatchRequestAddReplaceTest {
    return JSONPatchRequestAddReplaceTestFromJSONTyped(json, false);
}

export function JSONPatchRequestAddReplaceTestFromJSONTyped(json: any, ignoreDiscriminator: boolean): JSONPatchRequestAddReplaceTest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'path': json['path'],
        'value': json['value'],
        'op': json['op'],
    };
}

export function JSONPatchRequestAddReplaceTestToJSON(value?: JSONPatchRequestAddReplaceTest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'path': value.path,
        'value': value.value,
        'op': value.op,
    };
}

