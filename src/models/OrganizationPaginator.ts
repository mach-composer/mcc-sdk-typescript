/* tslint:disable */
/* eslint-disable */
/**
 * MCC Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Organization } from './Organization';
import {
    OrganizationFromJSON,
    OrganizationFromJSONTyped,
    OrganizationToJSON,
} from './Organization';

/**
 * 
 * @export
 * @interface OrganizationPaginator
 */
export interface OrganizationPaginator {
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginator
     */
    count: number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginator
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginator
     */
    offset: number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginator
     */
    limit: number;
    /**
     * 
     * @type {Array<Organization>}
     * @memberof OrganizationPaginator
     */
    results: Array<Organization>;
}

/**
 * Check if a given object implements the OrganizationPaginator interface.
 */
export function instanceOfOrganizationPaginator(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "count" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "offset" in value;
    isInstance = isInstance && "limit" in value;
    isInstance = isInstance && "results" in value;

    return isInstance;
}

export function OrganizationPaginatorFromJSON(json: any): OrganizationPaginator {
    return OrganizationPaginatorFromJSONTyped(json, false);
}

export function OrganizationPaginatorFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationPaginator {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': json['count'],
        'total': json['total'],
        'offset': json['offset'],
        'limit': json['limit'],
        'results': ((json['results'] as Array<any>).map(OrganizationFromJSON)),
    };
}

export function OrganizationPaginatorToJSON(value?: OrganizationPaginator | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'total': value.total,
        'offset': value.offset,
        'limit': value.limit,
        'results': ((value.results as Array<any>).map(OrganizationToJSON)),
    };
}

