/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommitData } from './CommitData';
import {
    CommitDataFromJSON,
    CommitDataFromJSONTyped,
    CommitDataToJSON,
} from './CommitData';

/**
 * 
 * @export
 * @interface CommitDataPaginatorAllOf
 */
export interface CommitDataPaginatorAllOf {
    /**
     * 
     * @type {Array<CommitData>}
     * @memberof CommitDataPaginatorAllOf
     */
    results?: Array<CommitData>;
}

/**
 * Check if a given object implements the CommitDataPaginatorAllOf interface.
 */
export function instanceOfCommitDataPaginatorAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommitDataPaginatorAllOfFromJSON(json: any): CommitDataPaginatorAllOf {
    return CommitDataPaginatorAllOfFromJSONTyped(json, false);
}

export function CommitDataPaginatorAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommitDataPaginatorAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'results': !exists(json, 'results') ? undefined : ((json['results'] as Array<any>).map(CommitDataFromJSON)),
    };
}

export function CommitDataPaginatorAllOfToJSON(value?: CommitDataPaginatorAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'results': value.results === undefined ? undefined : ((value.results as Array<any>).map(CommitDataToJSON)),
    };
}

