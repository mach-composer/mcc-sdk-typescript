/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface JSONPatchRequestRemove
 */
export interface JSONPatchRequestRemove {
    /**
     * A JSON Pointer path.
     * @type {string}
     * @memberof JSONPatchRequestRemove
     */
    path: string;
    /**
     * The operation to perform.
     * @type {string}
     * @memberof JSONPatchRequestRemove
     */
    op: JSONPatchRequestRemoveOpEnum;
}


/**
 * @export
 */
export const JSONPatchRequestRemoveOpEnum = {
    Remove: 'remove'
} as const;
export type JSONPatchRequestRemoveOpEnum = typeof JSONPatchRequestRemoveOpEnum[keyof typeof JSONPatchRequestRemoveOpEnum];


/**
 * Check if a given object implements the JSONPatchRequestRemove interface.
 */
export function instanceOfJSONPatchRequestRemove(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "op" in value;

    return isInstance;
}

export function JSONPatchRequestRemoveFromJSON(json: any): JSONPatchRequestRemove {
    return JSONPatchRequestRemoveFromJSONTyped(json, false);
}

export function JSONPatchRequestRemoveFromJSONTyped(json: any, ignoreDiscriminator: boolean): JSONPatchRequestRemove {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'path': json['path'],
        'op': json['op'],
    };
}

export function JSONPatchRequestRemoveToJSON(value?: JSONPatchRequestRemove | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'path': value.path,
        'op': value.op,
    };
}

