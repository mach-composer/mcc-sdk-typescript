/* tslint:disable */
/* eslint-disable */
/**
 * MCC Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MyAccountInformation200Response,
  Organization,
  OrganizationDraft,
  OrganizationPaginator,
  OrganizationUserInvite,
  OrganizationUserInvite401Response,
  OrganizationUserInviteDraft,
  OrganizationUserPaginator,
  Project,
  ProjectDraft,
  ProjectPaginator,
} from '../models';
import {
    MyAccountInformation200ResponseFromJSON,
    MyAccountInformation200ResponseToJSON,
    OrganizationFromJSON,
    OrganizationToJSON,
    OrganizationDraftFromJSON,
    OrganizationDraftToJSON,
    OrganizationPaginatorFromJSON,
    OrganizationPaginatorToJSON,
    OrganizationUserInviteFromJSON,
    OrganizationUserInviteToJSON,
    OrganizationUserInvite401ResponseFromJSON,
    OrganizationUserInvite401ResponseToJSON,
    OrganizationUserInviteDraftFromJSON,
    OrganizationUserInviteDraftToJSON,
    OrganizationUserPaginatorFromJSON,
    OrganizationUserPaginatorToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectDraftFromJSON,
    ProjectDraftToJSON,
    ProjectPaginatorFromJSON,
    ProjectPaginatorToJSON,
} from '../models';

export interface OrganizationCreateRequest {
    organizationDraft: OrganizationDraft;
}

export interface OrganizationUserInviteRequest {
    organization: string;
    organizationUserInviteDraft: OrganizationUserInviteDraft;
}

export interface OrganizationUserQueryRequest {
    organization: string;
}

export interface ProjectCreateRequest {
    organization: string;
    projectDraft: ProjectDraft;
}

export interface ProjectQueryRequest {
    organization: string;
}

/**
 * 
 */
export class AccountManagementApi extends runtime.BaseAPI {

    /**
     * Return user information from current user
     */
    async myAccountInformationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MyAccountInformation200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MyAccountInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Return user information from current user
     */
    async myAccountInformation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MyAccountInformation200Response> {
        const response = await this.myAccountInformationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create new organization
     */
    async organizationCreateRaw(requestParameters: OrganizationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters.organizationDraft === null || requestParameters.organizationDraft === undefined) {
            throw new runtime.RequiredError('organizationDraft','Required parameter requestParameters.organizationDraft was null or undefined when calling organizationCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationDraftToJSON(requestParameters.organizationDraft),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Create new organization
     */
    async organizationCreate(requestParameters: OrganizationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.organizationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all organizations
     */
    async organizationQueryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationPaginator>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationPaginatorFromJSON(jsonValue));
    }

    /**
     * List all organizations
     */
    async organizationQuery(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationPaginator> {
        const response = await this.organizationQueryRaw(initOverrides);
        return await response.value();
    }

    /**
     * Add user to an organization
     */
    async organizationUserInviteRaw(requestParameters: OrganizationUserInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUserInvite>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationUserInvite.');
        }

        if (requestParameters.organizationUserInviteDraft === null || requestParameters.organizationUserInviteDraft === undefined) {
            throw new runtime.RequiredError('organizationUserInviteDraft','Required parameter requestParameters.organizationUserInviteDraft was null or undefined when calling organizationUserInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/organizations/{organization}/users`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationUserInviteDraftToJSON(requestParameters.organizationUserInviteDraft),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUserInviteFromJSON(jsonValue));
    }

    /**
     * Add user to an organization
     */
    async organizationUserInvite(requestParameters: OrganizationUserInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUserInvite> {
        const response = await this.organizationUserInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all users in an organization
     */
    async organizationUserQueryRaw(requestParameters: OrganizationUserQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUserPaginator>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationUserQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/organizations/{organization}/users`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUserPaginatorFromJSON(jsonValue));
    }

    /**
     * List all users in an organization
     */
    async organizationUserQuery(requestParameters: OrganizationUserQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUserPaginator> {
        const response = await this.organizationUserQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new project in an organization
     */
    async projectCreateRaw(requestParameters: ProjectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling projectCreate.');
        }

        if (requestParameters.projectDraft === null || requestParameters.projectDraft === undefined) {
            throw new runtime.RequiredError('projectDraft','Required parameter requestParameters.projectDraft was null or undefined when calling projectCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/organizations/{organization}/projects`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectDraftToJSON(requestParameters.projectDraft),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Create new project in an organization
     */
    async projectCreate(requestParameters: ProjectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.projectCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all projects in an organization
     */
    async projectQueryRaw(requestParameters: ProjectQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectPaginator>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling projectQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/organizations/{organization}/projects`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectPaginatorFromJSON(jsonValue));
    }

    /**
     * List all projects in an organization
     */
    async projectQuery(requestParameters: ProjectQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectPaginator> {
        const response = await this.projectQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
