/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiClient,
  ApiClientDraft,
  ApiClientPaginator,
  ErrorForbidden,
  ErrorUnauthorized,
} from '../models';
import {
    ApiClientFromJSON,
    ApiClientToJSON,
    ApiClientDraftFromJSON,
    ApiClientDraftToJSON,
    ApiClientPaginatorFromJSON,
    ApiClientPaginatorToJSON,
    ErrorForbiddenFromJSON,
    ErrorForbiddenToJSON,
    ErrorUnauthorizedFromJSON,
    ErrorUnauthorizedToJSON,
} from '../models';

export interface ApiClientCreateRequest {
    organization: string;
    project: string;
    apiClientDraft: ApiClientDraft;
}

export interface ApiClientDeleteRequest {
    organization: string;
    project: string;
    id: string;
}

export interface ApiClientQueryRequest {
    organization: string;
    project: string;
    offset?: number;
    limit?: number;
    sort?: Array<string>;
}

/**
 * 
 */
export class APIClientsApi extends runtime.BaseAPI {

    /**
     * Create new api client
     */
    async apiClientCreateRaw(requestParameters: ApiClientCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiClient>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiClientCreate.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling apiClientCreate.');
        }

        if (requestParameters.apiClientDraft === null || requestParameters.apiClientDraft === undefined) {
            throw new runtime.RequiredError('apiClientDraft','Required parameter requestParameters.apiClientDraft was null or undefined when calling apiClientCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}/api-clients`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiClientDraftToJSON(requestParameters.apiClientDraft),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiClientFromJSON(jsonValue));
    }

    /**
     * Create new api client
     */
    async apiClientCreate(requestParameters: ApiClientCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiClient> {
        const response = await this.apiClientCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an API Client
     */
    async apiClientDeleteRaw(requestParameters: ApiClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiClient>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiClientDelete.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling apiClientDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiClientDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}/api-clients/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiClientFromJSON(jsonValue));
    }

    /**
     * Delete an API Client
     */
    async apiClientDelete(requestParameters: ApiClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiClient> {
        const response = await this.apiClientDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all api clients
     */
    async apiClientQueryRaw(requestParameters: ApiClientQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiClientPaginator>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiClientQuery.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling apiClientQuery.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}/api-clients`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiClientPaginatorFromJSON(jsonValue));
    }

    /**
     * List all api clients
     */
    async apiClientQuery(requestParameters: ApiClientQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiClientPaginator> {
        const response = await this.apiClientQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
