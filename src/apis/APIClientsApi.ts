/* tslint:disable */
/* eslint-disable */
/**
 * MCC Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiClient,
  ApiClientDraft,
  ApiClientPaginator,
} from '../models';
import {
    ApiClientFromJSON,
    ApiClientToJSON,
    ApiClientDraftFromJSON,
    ApiClientDraftToJSON,
    ApiClientPaginatorFromJSON,
    ApiClientPaginatorToJSON,
} from '../models';

export interface ApiClientCreateRequest {
    organization: string;
    project: string;
    apiClientDraft: ApiClientDraft;
}

export interface ApiClientQueryRequest {
    organization: string;
    project: string;
}

/**
 * 
 */
export class APIClientsApi extends runtime.BaseAPI {

    /**
     * Create new api client
     */
    async apiClientCreateRaw(requestParameters: ApiClientCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiClient>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiClientCreate.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling apiClientCreate.');
        }

        if (requestParameters.apiClientDraft === null || requestParameters.apiClientDraft === undefined) {
            throw new runtime.RequiredError('apiClientDraft','Required parameter requestParameters.apiClientDraft was null or undefined when calling apiClientCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{organization}/projects/{project}/api-clients`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiClientDraftToJSON(requestParameters.apiClientDraft),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiClientFromJSON(jsonValue));
    }

    /**
     * Create new api client
     */
    async apiClientCreate(requestParameters: ApiClientCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiClient> {
        const response = await this.apiClientCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all api clients
     */
    async apiClientQueryRaw(requestParameters: ApiClientQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiClientPaginator>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiClientQuery.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling apiClientQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{organization}/projects/{project}/api-clients`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiClientPaginatorFromJSON(jsonValue));
    }

    /**
     * List all api clients
     */
    async apiClientQuery(requestParameters: ApiClientQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiClientPaginator> {
        const response = await this.apiClientQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
