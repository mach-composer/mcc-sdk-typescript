/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorForbidden,
  ErrorUnauthorized,
  MyAccountInformation200Response,
  OrganizationUserInviteData,
} from '../models';
import {
    ErrorForbiddenFromJSON,
    ErrorForbiddenToJSON,
    ErrorUnauthorizedFromJSON,
    ErrorUnauthorizedToJSON,
    MyAccountInformation200ResponseFromJSON,
    MyAccountInformation200ResponseToJSON,
    OrganizationUserInviteDataFromJSON,
    OrganizationUserInviteDataToJSON,
} from '../models';

export interface OrganizationUserInviteAcceptRequest {
    organization: string;
    id: string;
}

export interface OrganizationUserInviteViewRequest {
    organization: string;
    id: string;
}

/**
 * 
 */
export class MyAccountApi extends runtime.BaseAPI {

    /**
     * Return user information from current user
     * Get user information
     */
    async myAccountInformationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MyAccountInformation200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/account/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MyAccountInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Return user information from current user
     * Get user information
     */
    async myAccountInformation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MyAccountInformation200Response> {
        const response = await this.myAccountInformationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Accept a user invite
     */
    async organizationUserInviteAcceptRaw(requestParameters: OrganizationUserInviteAcceptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUserInviteData>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationUserInviteAccept.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationUserInviteAccept.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/users/invite/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUserInviteDataFromJSON(jsonValue));
    }

    /**
     * Accept a user invite
     */
    async organizationUserInviteAccept(requestParameters: OrganizationUserInviteAcceptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUserInviteData> {
        const response = await this.organizationUserInviteAcceptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * View invite information
     */
    async organizationUserInviteViewRaw(requestParameters: OrganizationUserInviteViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUserInviteData>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationUserInviteView.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationUserInviteView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizations/{organization}/users/invite/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUserInviteDataFromJSON(jsonValue));
    }

    /**
     * View invite information
     */
    async organizationUserInviteView(requestParameters: OrganizationUserInviteViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUserInviteData> {
        const response = await this.organizationUserInviteViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
