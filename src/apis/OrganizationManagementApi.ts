/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorForbidden,
  ErrorUnauthorized,
  Organization,
  OrganizationDraft,
  OrganizationPaginator,
  OrganizationUserInvite,
  OrganizationUserInviteData,
  OrganizationUserInviteDraft,
  OrganizationUserPaginator,
  PatchRequestInner,
  Project,
  ProjectDraft,
  ProjectPaginator,
} from '../models';
import {
    ErrorForbiddenFromJSON,
    ErrorForbiddenToJSON,
    ErrorUnauthorizedFromJSON,
    ErrorUnauthorizedToJSON,
    OrganizationFromJSON,
    OrganizationToJSON,
    OrganizationDraftFromJSON,
    OrganizationDraftToJSON,
    OrganizationPaginatorFromJSON,
    OrganizationPaginatorToJSON,
    OrganizationUserInviteFromJSON,
    OrganizationUserInviteToJSON,
    OrganizationUserInviteDataFromJSON,
    OrganizationUserInviteDataToJSON,
    OrganizationUserInviteDraftFromJSON,
    OrganizationUserInviteDraftToJSON,
    OrganizationUserPaginatorFromJSON,
    OrganizationUserPaginatorToJSON,
    PatchRequestInnerFromJSON,
    PatchRequestInnerToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectDraftFromJSON,
    ProjectDraftToJSON,
    ProjectPaginatorFromJSON,
    ProjectPaginatorToJSON,
} from '../models';

export interface OrganizationCreateRequest {
    organizationDraft: OrganizationDraft;
}

export interface OrganizationPatchRequest {
    organization: string;
    patchRequestInner?: Array<PatchRequestInner>;
}

export interface OrganizationUserInviteRequest {
    organization: string;
    organizationUserInviteDraft: OrganizationUserInviteDraft;
}

export interface OrganizationUserInviteAcceptRequest {
    organization: string;
    id: string;
}

export interface OrganizationUserInviteViewRequest {
    organization: string;
    id: string;
}

export interface OrganizationUserQueryRequest {
    organization: string;
}

export interface ProjectCreateRequest {
    organization: string;
    projectDraft: ProjectDraft;
}

export interface ProjectDeleteRequest {
    organization: string;
    project: string;
}

export interface ProjectPatchRequest {
    organization: string;
    project: string;
    patchRequestInner?: Array<PatchRequestInner>;
}

export interface ProjectQueryRequest {
    organization: string;
}

/**
 * 
 */
export class OrganizationManagementApi extends runtime.BaseAPI {

    /**
     * Create new organization
     */
    async organizationCreateRaw(requestParameters: OrganizationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters.organizationDraft === null || requestParameters.organizationDraft === undefined) {
            throw new runtime.RequiredError('organizationDraft','Required parameter requestParameters.organizationDraft was null or undefined when calling organizationCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationDraftToJSON(requestParameters.organizationDraft),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Create new organization
     */
    async organizationCreate(requestParameters: OrganizationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.organizationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an organization
     */
    async organizationPatchRaw(requestParameters: OrganizationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.patchRequestInner.map(PatchRequestInnerToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Update an organization
     */
    async organizationPatch(requestParameters: OrganizationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.organizationPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all organizations
     */
    async organizationQueryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationPaginator>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationPaginatorFromJSON(jsonValue));
    }

    /**
     * List all organizations
     */
    async organizationQuery(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationPaginator> {
        const response = await this.organizationQueryRaw(initOverrides);
        return await response.value();
    }

    /**
     * Invite a user to the organization
     */
    async organizationUserInviteRaw(requestParameters: OrganizationUserInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUserInvite>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationUserInvite.');
        }

        if (requestParameters.organizationUserInviteDraft === null || requestParameters.organizationUserInviteDraft === undefined) {
            throw new runtime.RequiredError('organizationUserInviteDraft','Required parameter requestParameters.organizationUserInviteDraft was null or undefined when calling organizationUserInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/users/invite`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationUserInviteDraftToJSON(requestParameters.organizationUserInviteDraft),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUserInviteFromJSON(jsonValue));
    }

    /**
     * Invite a user to the organization
     */
    async organizationUserInvite(requestParameters: OrganizationUserInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUserInvite> {
        const response = await this.organizationUserInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accept a user invite
     */
    async organizationUserInviteAcceptRaw(requestParameters: OrganizationUserInviteAcceptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUserInviteData>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationUserInviteAccept.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationUserInviteAccept.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/users/invite/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUserInviteDataFromJSON(jsonValue));
    }

    /**
     * Accept a user invite
     */
    async organizationUserInviteAccept(requestParameters: OrganizationUserInviteAcceptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUserInviteData> {
        const response = await this.organizationUserInviteAcceptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * View invite information
     */
    async organizationUserInviteViewRaw(requestParameters: OrganizationUserInviteViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUserInviteData>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationUserInviteView.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationUserInviteView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizations/{organization}/users/invite/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUserInviteDataFromJSON(jsonValue));
    }

    /**
     * View invite information
     */
    async organizationUserInviteView(requestParameters: OrganizationUserInviteViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUserInviteData> {
        const response = await this.organizationUserInviteViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all users in an organization
     */
    async organizationUserQueryRaw(requestParameters: OrganizationUserQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUserPaginator>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationUserQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/users`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUserPaginatorFromJSON(jsonValue));
    }

    /**
     * List all users in an organization
     */
    async organizationUserQuery(requestParameters: OrganizationUserQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUserPaginator> {
        const response = await this.organizationUserQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new project in an organization
     */
    async projectCreateRaw(requestParameters: ProjectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling projectCreate.');
        }

        if (requestParameters.projectDraft === null || requestParameters.projectDraft === undefined) {
            throw new runtime.RequiredError('projectDraft','Required parameter requestParameters.projectDraft was null or undefined when calling projectCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectDraftToJSON(requestParameters.projectDraft),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Create new project in an organization
     */
    async projectCreate(requestParameters: ProjectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.projectCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This action will delete the project and all related resources.
     * Delete a project
     */
    async projectDeleteRaw(requestParameters: ProjectDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling projectDelete.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling projectDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * This action will delete the project and all related resources.
     * Delete a project
     */
    async projectDelete(requestParameters: ProjectDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.projectDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a Project
     */
    async projectPatchRaw(requestParameters: ProjectPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling projectPatch.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling projectPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.patchRequestInner.map(PatchRequestInnerToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Update a Project
     */
    async projectPatch(requestParameters: ProjectPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.projectPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all projects in an organization
     */
    async projectQueryRaw(requestParameters: ProjectQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectPaginator>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling projectQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectPaginatorFromJSON(jsonValue));
    }

    /**
     * List all projects in an organization
     */
    async projectQuery(requestParameters: ProjectQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectPaginator> {
        const response = await this.projectQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
