/* tslint:disable */
/* eslint-disable */
/**
 * MACH composer Cloud (MCC) Public API
 * # Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html). 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: mach@labdigital.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommitDataPaginator,
  Component,
  ComponentDraft,
  ComponentPaginator,
  ComponentVersion,
  ComponentVersionCommits,
  ComponentVersionDraft,
  ComponentVersionPaginator,
  ErrorForbidden,
  ErrorUnauthorized,
} from '../models';
import {
    CommitDataPaginatorFromJSON,
    CommitDataPaginatorToJSON,
    ComponentFromJSON,
    ComponentToJSON,
    ComponentDraftFromJSON,
    ComponentDraftToJSON,
    ComponentPaginatorFromJSON,
    ComponentPaginatorToJSON,
    ComponentVersionFromJSON,
    ComponentVersionToJSON,
    ComponentVersionCommitsFromJSON,
    ComponentVersionCommitsToJSON,
    ComponentVersionDraftFromJSON,
    ComponentVersionDraftToJSON,
    ComponentVersionPaginatorFromJSON,
    ComponentVersionPaginatorToJSON,
    ErrorForbiddenFromJSON,
    ErrorForbiddenToJSON,
    ErrorUnauthorizedFromJSON,
    ErrorUnauthorizedToJSON,
} from '../models';

export interface ComponentCreateRequest {
    organization: string;
    project: string;
    componentDraft: ComponentDraft;
}

export interface ComponentLatestVersionRequest {
    organization: string;
    project: string;
    component: string;
    branch: string;
}

export interface ComponentQueryRequest {
    organization: string;
    project: string;
    offset?: number;
    limit?: number;
    sort?: Array<string>;
}

export interface ComponentVersionCreateRequest {
    organization: string;
    project: string;
    component: string;
    componentVersionDraft: ComponentVersionDraft;
}

export interface ComponentVersionPushCommitsRequest {
    organization: string;
    project: string;
    component: string;
    version: string;
    componentVersionCommits: ComponentVersionCommits;
}

export interface ComponentVersionQueryRequest {
    organization: string;
    project: string;
    component: string;
    offset?: number;
    limit?: number;
    sort?: Array<string>;
}

export interface ComponentVersionQueryCommitsRequest {
    organization: string;
    project: string;
    component: string;
    version: string;
    offset?: number;
    limit?: number;
    sort?: Array<string>;
}

/**
 * 
 */
export class ComponentsApi extends runtime.BaseAPI {

    /**
     * Create component
     */
    async componentCreateRaw(requestParameters: ComponentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Component>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling componentCreate.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling componentCreate.');
        }

        if (requestParameters.componentDraft === null || requestParameters.componentDraft === undefined) {
            throw new runtime.RequiredError('componentDraft','Required parameter requestParameters.componentDraft was null or undefined when calling componentCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}/components`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComponentDraftToJSON(requestParameters.componentDraft),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComponentFromJSON(jsonValue));
    }

    /**
     * Create component
     */
    async componentCreate(requestParameters: ComponentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Component> {
        const response = await this.componentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get last component version.
     */
    async componentLatestVersionRaw(requestParameters: ComponentLatestVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComponentVersion>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling componentLatestVersion.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling componentLatestVersion.');
        }

        if (requestParameters.component === null || requestParameters.component === undefined) {
            throw new runtime.RequiredError('component','Required parameter requestParameters.component was null or undefined when calling componentLatestVersion.');
        }

        if (requestParameters.branch === null || requestParameters.branch === undefined) {
            throw new runtime.RequiredError('branch','Required parameter requestParameters.branch was null or undefined when calling componentLatestVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}/components/{component}/latest`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))).replace(`{${"component"}}`, encodeURIComponent(String(requestParameters.component))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComponentVersionFromJSON(jsonValue));
    }

    /**
     * Get last component version.
     */
    async componentLatestVersion(requestParameters: ComponentLatestVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComponentVersion> {
        const response = await this.componentLatestVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all components
     */
    async componentQueryRaw(requestParameters: ComponentQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComponentPaginator>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling componentQuery.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling componentQuery.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}/components`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComponentPaginatorFromJSON(jsonValue));
    }

    /**
     * List all components
     */
    async componentQuery(requestParameters: ComponentQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComponentPaginator> {
        const response = await this.componentQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create component
     */
    async componentVersionCreateRaw(requestParameters: ComponentVersionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComponentVersion>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling componentVersionCreate.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling componentVersionCreate.');
        }

        if (requestParameters.component === null || requestParameters.component === undefined) {
            throw new runtime.RequiredError('component','Required parameter requestParameters.component was null or undefined when calling componentVersionCreate.');
        }

        if (requestParameters.componentVersionDraft === null || requestParameters.componentVersionDraft === undefined) {
            throw new runtime.RequiredError('componentVersionDraft','Required parameter requestParameters.componentVersionDraft was null or undefined when calling componentVersionCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}/components/{component}/versions`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))).replace(`{${"component"}}`, encodeURIComponent(String(requestParameters.component))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComponentVersionDraftToJSON(requestParameters.componentVersionDraft),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComponentVersionFromJSON(jsonValue));
    }

    /**
     * Create component
     */
    async componentVersionCreate(requestParameters: ComponentVersionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComponentVersion> {
        const response = await this.componentVersionCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Push commits for this component version
     */
    async componentVersionPushCommitsRaw(requestParameters: ComponentVersionPushCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling componentVersionPushCommits.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling componentVersionPushCommits.');
        }

        if (requestParameters.component === null || requestParameters.component === undefined) {
            throw new runtime.RequiredError('component','Required parameter requestParameters.component was null or undefined when calling componentVersionPushCommits.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling componentVersionPushCommits.');
        }

        if (requestParameters.componentVersionCommits === null || requestParameters.componentVersionCommits === undefined) {
            throw new runtime.RequiredError('componentVersionCommits','Required parameter requestParameters.componentVersionCommits was null or undefined when calling componentVersionPushCommits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}/components/{component}/versions/{version}/commits`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))).replace(`{${"component"}}`, encodeURIComponent(String(requestParameters.component))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComponentVersionCommitsToJSON(requestParameters.componentVersionCommits),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Push commits for this component version
     */
    async componentVersionPushCommits(requestParameters: ComponentVersionPushCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.componentVersionPushCommitsRaw(requestParameters, initOverrides);
    }

    /**
     * List all versions of a component
     */
    async componentVersionQueryRaw(requestParameters: ComponentVersionQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComponentVersionPaginator>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling componentVersionQuery.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling componentVersionQuery.');
        }

        if (requestParameters.component === null || requestParameters.component === undefined) {
            throw new runtime.RequiredError('component','Required parameter requestParameters.component was null or undefined when calling componentVersionQuery.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}/components/{component}/versions`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))).replace(`{${"component"}}`, encodeURIComponent(String(requestParameters.component))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComponentVersionPaginatorFromJSON(jsonValue));
    }

    /**
     * List all versions of a component
     */
    async componentVersionQuery(requestParameters: ComponentVersionQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComponentVersionPaginator> {
        const response = await this.componentVersionQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get commits for this component version
     */
    async componentVersionQueryCommitsRaw(requestParameters: ComponentVersionQueryCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommitDataPaginator>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling componentVersionQueryCommits.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling componentVersionQueryCommits.');
        }

        if (requestParameters.component === null || requestParameters.component === undefined) {
            throw new runtime.RequiredError('component','Required parameter requestParameters.component was null or undefined when calling componentVersionQueryCommits.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling componentVersionQueryCommits.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/organizations/{organization}/projects/{project}/components/{component}/versions/{version}/commits`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters.project))).replace(`{${"component"}}`, encodeURIComponent(String(requestParameters.component))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommitDataPaginatorFromJSON(jsonValue));
    }

    /**
     * Get commits for this component version
     */
    async componentVersionQueryCommits(requestParameters: ComponentVersionQueryCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommitDataPaginator> {
        const response = await this.componentVersionQueryCommitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
